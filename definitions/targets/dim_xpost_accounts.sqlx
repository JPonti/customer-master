config {
  type: "incremental",
  uniqueKey: ["firebase_id"],
  bigquery: {
    partitionBy: "registration_date",
    updatePartitionFilter:
        "registration_date >= date_sub(CURRENT_DATE('Asia/Manila'), interval 1 DAY)"
  }
}

with parsed as (
SELECT
  id,
  COALESCE(JSON_EXTRACT_SCALAR(TRIM(JSON_EXTRACT(payload, "$.meta"), '"'), '$.signedupAt.xpost'),
           TRIM(JSON_EXTRACT(payload, "$.delta.meta.signedupAt.xpost"), '"'),
           TRIM(JSON_EXTRACT(payload, "$.data.meta.signedupAt.xpost"), '"'),
           TRIM(JSON_EXTRACT(payload, "$.meta.signedupAt.xpost"), '"')
           ) signed_up_at_xpost,
  COALESCE(TRIM(JSON_EXTRACT(payload, "$.delta.email"), '"'),
           TRIM(JSON_EXTRACT(payload, "$.data.email"), '"'),
           TRIM(JSON_EXTRACT(payload, "$.email"), '"')
           ) email,
  ROW_NUMBER() OVER(PARTITION BY id ORDER BY kafka_streamed_at desc) AS seq,
  kafka_streamed_at
FROM  ${ref("prod_merchants_v3")} u
  ${when(incremental(), `WHERE DATE(kafka_streamed_at ) >= DATE_SUB(CURRENT_DATE('Asia/Manila'), interval 1 DAY)`)}
)
,users as (
SELECT id user_id,
       seq,
       last_value(signed_up_at_xpost ignore nulls) over (partition by id order by seq desc) signed_up_at_xpost,
       last_value(kafka_streamed_at ignore nulls) over (partition by id order by seq desc) kafka_streamed_at,
       last_value(email ignore nulls) over (partition by id order by seq desc) email
  FROM parsed
)
SELECT
  *
FROM (
SELECT
  p.id AS account_id,
  COALESCE(p.external_id,CAST(NULL AS STRING)) as firebase_id,
  'merchant' as customer_type,
  DATE(p.created_at, 'Asia/Manila') as registration_date,
  DATETIME(p.created_at,'Asia/Manila') as registration_time,
  CASE WHEN DATE(p.created_at, 'Asia/Manila') >=  '2021-03-22' THEN 'GGX Biz' ELSE o.name END as product
FROM ${resolve({schema: "base_f3", name: "core_parties"})} p 
JOIN ${resolve({schema: "base_f3", name: "core_relationships"})} r ON r.from_party_id = p.id AND r.to_party_id = 3658
JOIN ${resolve({schema: "base_f3", name: "core_organizations"})}  o ON o.party_id = r.to_party_id
LEFT JOIN users f ON f.user_id = p.external_id
LEFT JOIN ${ref("t_test_accounts")} t ON t.email = f.email AND product IN ('XPost' , 'GGX Biz')
WHERE t.email IS NULL
${when(incremental(), `AND DATE(p.base_loaded_at) >= DATE_SUB(CURRENT_DATE('Asia/Manila'), interval 1 DAY)`)}
)
WHERE product IS NOT NULL
${when(incremental(), `AND account_id NOT IN (SELECT account_id FROM ${self()})`)}
UNION DISTINCT
SELECT
  p.id AS account_id,
  CAST(NULL AS STRING) as firebase_id,
  'merchant' as customer_type,
  DATE(p.created_at, 'Asia/Manila') as registration_date,
  DATETIME(p.created_at,'Asia/Manila') as registration_time,
  CASE WHEN DATE(p.created_at,'Asia/Manila') >= '2021-03-22' THEN 'GGX Biz' ELSE 'XPost' END as product
FROM ${resolve({schema: "base_f3", name: "core_parties"})} p
JOIN ${resolve({schema: "base_f3", name: "core_organizations"})} o ON o.party_id = p.id
JOIN ${resolve({schema: "base_f3", name: "core_party_roles"})} pr ON pr.party_id = p.id 
LEFT JOIN ${resolve({schema: "base_f3", name: "core_relationships"})} rf ON rf.from_party_id = p.id AND rf.type = 'merchant_of'
LEFT JOIN ${resolve({schema: "base_f3", name: "core_relationships"})} rt ON rt.to_party_id = p.id AND rt.type = 'merchant_of'
WHERE rf.id IS NULL
  AND rt.id IS NULL
  AND p.id NOT IN (6,7,8,9,19,70189,70190,70191,87654,215744,317799,323063,323064,661556,683375)
  AND o.party_id IS NOT NULL
  AND pr.role_id = 4
${when(incremental(), `AND DATE(p.base_loaded_at) >= DATE_SUB(CURRENT_DATE('Asia/Manila'), interval 1 DAY)
AND p.id NOT IN (SELECT account_id FROM ${self()})`)}
