config {
  type: "incremental",
  uniqueKey: ["firebase_id"],
  bigquery: {
    partitionBy: "registration_date"
  }
}

    -- updatePartitionFilter:
    --     "registration_date >= date_sub(CURRENT_DATE('Asia/Manila'), interval 1 DAY)"

with parsed as (
SELECT
  id,
  COALESCE(JSON_EXTRACT_SCALAR(TRIM(JSON_EXTRACT(payload, "$.meta"), '"'), '$.signedupAt.gogoxpress'),
           TRIM(JSON_EXTRACT(payload, "$.delta.meta.signedupAt.gogoxpress"), '"'),
           TRIM(JSON_EXTRACT(payload, "$.data.meta.signedupAt.gogoxpress"), '"'),
           TRIM(JSON_EXTRACT(payload, "$.meta.signedupAt.gogoxpress"), '"'),
           TRIM(JSON_EXTRACT(payload, "$.delta.meta.coachmarksDoneAt.gogoxpress.dashboard"), '"')
           ) signed_up_at_gogoxpress,
  COALESCE(TRIM(JSON_EXTRACT(payload, "$.delta.email"), '"'),
           TRIM(JSON_EXTRACT(payload, "$.data.email"), '"'),
           TRIM(JSON_EXTRACT(payload, "$.email"), '"')
           ) email,
  ROW_NUMBER() OVER(PARTITION BY id ORDER BY kafka_streamed_at desc) AS seq,
  kafka_streamed_at
FROM  ${ref("prod_merchants_v3")} u
  ${when(incremental(), `WHERE DATE(kafka_streamed_at ) >= DATE_SUB(CURRENT_DATE('Asia/Manila'), interval 1 DAY)`)}
)
,users as (
SELECT id user_id,
       seq,
       last_value(signed_up_at_gogoxpress ignore nulls) over (partition by id order by seq desc) signed_up_at_gogoxpress,
       last_value(kafka_streamed_at ignore nulls) over (partition by id order by seq desc) kafka_streamed_at,
       last_value(email ignore nulls) over (partition by id order by seq desc) email
  FROM parsed
)
SELECT DISTINCT * FROM (

SELECT 
  COALESCE(p.id, CAST(NULL AS INT)) AS account_id,
  COALESCE(f.user_id,p.external_id ) as firebase_id,
  'merchant' as customer_type,
  DATE(COALESCE(PARSE_TIMESTAMP('%a, %d %b %Y %H:%M:%S',SUBSTR(signed_up_at_gogoxpress ,1,25)),p.created_at),'Asia/Manila') as registration_date,
  DATETIME(COALESCE(PARSE_TIMESTAMP('%a, %d %b %Y %H:%M:%S',SUBSTR(signed_up_at_gogoxpress ,1,25)),p.created_at),'Asia/Manila') as registration_time,
  'GOGO' as product  --hardcoded because of signed_up_at_gogoxpress filter NOT NULL
FROM users f
LEFT JOIN ${ref("core_parties")} p ON p.external_id = f.user_id 
LEFT JOIN ${ref("core_relationships")} r ON r.from_party_id = p.id AND r.to_party_id = 215085
LEFT JOIN ${ref("t_test_accounts")} t ON t.email = f.email AND product = 'Gogo'
-- LEFT JOIN `data-pipeline-241307.base_f3.core_organizations` o ON o.party_id = r.to_party_id
WHERE f.seq = 1 AND signed_up_at_gogoxpress IS NOT NULL AND t.email IS NULL
  
UNION DISTINCT

SELECT 
  COALESCE(p.id, CAST(NULL AS INT)) AS account_id,
  COALESCE(f.user_id,p.external_id ) as firebase_id,
  'merchant' as customer_type,
  DATE(COALESCE(PARSE_TIMESTAMP('%a, %d %b %Y %H:%M:%S',SUBSTR(signed_up_at_gogoxpress ,1,25)),p.created_at),'Asia/Manila') as registration_date,
  DATETIME(COALESCE(PARSE_TIMESTAMP('%a, %d %b %Y %H:%M:%S',SUBSTR(signed_up_at_gogoxpress ,1,25)),p.created_at),'Asia/Manila') as registration_time,
  o.name as product,
FROM ${ref("core_parties")} p
JOIN  ${ref("core_relationships")} r ON r.from_party_id = p.id AND r.to_party_id = 215085
LEFT JOIN users f ON p.external_id = f.user_id AND seq = 1 --AND signed_up_at_gogoxpress IS NULL
LEFT JOIN ${ref("core_organizations")} o ON o.party_id = r.to_party_id
LEFT JOIN ${ref("t_test_accounts")} t ON t.email = f.email AND product = 'Gogo'
WHERE r.from_party_id IS NOT NULL AND t.email IS NULL
  ${when(incremental(), `AND DATE(p.base_loaded_at) >= DATE_SUB(CURRENT_DATE('Asia/Manila'), interval 1 DAY)`)}

)

